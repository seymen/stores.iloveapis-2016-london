/* jslint node: true */
'use strict';

var fs = require('fs');
var casual = require('casual');
var moment = require('moment');

var build_amok = function() {
	var amok = new Amok();
	return amok;
};

function Amok (mock_resource_directory) {
	this.resourceDir = mock_resource_directory || 'responses';
}

// Allow to set responses directory
Amok.prototype.setResponsesDirectory = function(mock_resource_directory) {
	this.resourceDir = mock_resource_directory || 'responses';
};

// Main amock funcionality
Amok.prototype.respond = function(req, res) {
	var self = this;
	var resourceName = req.params.resource || '';
	var resourceType = req.headers['x-mock-filename'] || '';
	var responseCode = req.headers['x-mock-response-code'] || 200;
	
	// respond from static file
	respondFromFile(req, res, resourceName + resourceType, responseCode, self.resourceDir);
};

var respondFromFile = function(req, res, resourceFullName, responseCode, dirPath) {
	fs.readFile(process.cwd() + '/' + dirPath + '/' + resourceFullName, 'utf8', function (err, data) {
	    if (err) {
			res.status(404);
			res.send('{"error":"Mock resource not found"}');
			return;
	    }

		if (data !== null){
			var date = moment().format('YYYY MM DD');
			var randomDate = casual.date('YYYY-MM-DD');
			var paymentData = JSON.stringify(casual.card_data);
			var longid = Math.floor(Math.random() * 20000000000) + 10000000000;
			var shortid = Math.floor(Math.random() * 20000) + 1000;
			var randomCacheKey = Math.floor(Math.random() * 20000000000) + 10000000000;

			var responseData = data;
			
			responseData = responseData.replace("@date@", date);
			responseData = responseData.replace("@randomDate@", randomDate);
			responseData = responseData.replace("@paymentData@", paymentData);
			responseData = responseData.replace("@longid@", longid);
			responseData = responseData.replace("@shortid@", shortid);

            // my paging logic
            var limit = parseInt(req.query.limit) || 10;
            var offset = parseInt(req.query.offset) || 0;

            var responseJson = JSON.parse(responseData);
            responseJson.stores = responseJson.stores.slice(offset, limit+offset);
            responseJson.meta.limit = limit;
            responseJson.meta.offset = offset;
            responseJson.meta.count = responseJson.stores.length;
            // end of my paging logic

			res.status(responseCode);
			res.send(responseJson);
			return;
		} else {
			res.send('{"error":"Empty mock response file!"}');			
		}
	});
};

module.exports = build_amok();